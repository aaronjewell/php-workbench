#!/usr/bin/env php
<?php

declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';

use Psy\Context;
use PhpWorkbench\CodeCleaner;
use PhpWorkbench\ErrorHandler;
use PhpWorkbench\ExecutionClosure;
use PhpWorkbench\Executor;
use PhpWorkbench\Input;
use PhpWorkbench\Output;
use PhpWorkbench\Logger;
use PhpWorkbench\Timeout;
use PhpWorkbench\Configuration;

try {
    $config = Configuration::fromEnvironment();
} catch (Throwable $e) {
    fwrite(STDERR, $e->getMessage() . "\n");
    exit($e->getCode() ?: 1);
}

if ($config->isDebugEnabled()) {
    Logger::info('PHP Workbench runner starting', [
        'php_version' => PHP_VERSION,
        'cwd' => getcwd(),
        'log_destination' => $config->getLogDestination(),
        'timeout' => $config->getTimeoutSeconds(),
        'debug_enabled' => $config->isDebugEnabled(),
    ]);
}

try {
    Timeout::init($config->getTimeoutSeconds());

    Logger::init($config->isDebugEnabled(), $config->getLogDestination());

    $executor = new Executor(
        new Context(),
        new Input(STDIN, $config->getToken()),
        new Output(STDOUT),
        new CodeCleaner(),
        new ErrorHandler(),
    );

    $loop = new ExecutionClosure($executor);

    $loop->execute();
} catch (Throwable $e) {
    fwrite(STDERR, $e->getMessage() . "\n");
    exit($e->getCode() ?? 1);
} finally {
    Logger::info('PHP Workbench runner shutting down');
    Logger::shutdown();
}