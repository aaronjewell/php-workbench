---
alwaysApply: true
description: "Incremental delivery workflow with small, deliverable steps"
---

# Incremental Delivery Workflow

## Development Philosophy
Work should be delivered in **many small steps** rather than large changes. Each step represents a complete, deliverable unit of work that maintains or improves the extension's quality.

## Step Definition
A **step** is a set of actions that takes the codebase from one deliverable state to another deliverable state.

### Requirements for Each Step
- **Deliverable State**: Code can be released at any point (proper quality and correctness)
- **Non-Regression**: Cannot make the extension worse than the previous state
- **Minimal Size**: As small as reasonably possible given the nature of the change
- **Complete**: Must pass `test` npm script before considering step complete

### Step Characteristics
- ✅ **Does not need to improve extension value** - maintenance and refactoring steps are valid
- ✅ **Must maintain extension quality** - no broken functionality or degraded performance
- ✅ **Should be atomic** - represents one logical unit of change
- ✅ **Must be releasable** - proper code quality, tests pass, builds successfully

## Step Size Guidelines
Use judgment to determine appropriate step size based on:

- **Refactoring**: Isolate changes to single classes/modules where possible
- **Bug Fixes**: Minimal change to address specific issue
- **Testing**: Add tests incrementally alongside feature development
- **Configuration**: One configuration change per step

## Completion Criteria
Every step must satisfy:

1. **Build Success**: `npm run vscode:prepublish` completes without errors
2. **Test Passing**: All existing tests continue to pass, new tests written and passing
3. **Code Quality**: Meets linting and formatting standards
4. **Functionality**: No regression in existing features
5. **Documentation**: Updated if public APIs changed

## Development Workflow

### Action vs Step Definitions
- **Action**: A single logical change (add interface, implement method, add test)
- **Step**: A complete deliverable unit composed of multiple actions

### Workflow Process
1. **Plan the Step**: Define the minimal change to reach next deliverable state
2. **Break into Actions**: Identify individual actions needed for the step
3. **Implement Action**: Make a single logical change
4. **Commit Action**: Use conventional commits after each action completion
5. **Verify Step**: Run `npm run vscode:prepublish` to ensure step completion
6. **Release Step**: Tag or publish the complete, deliverable step
7. **Repeat**: Move to next small step

### Commit and Release Strategy
- **Commit Frequency**: After every completed action
- **Commit Format**: Follow conventional commits standard (@conventional-commits.mdc)
- **Release Timing**: After each completed step (when deliverable state is reached)
- **Release Types**: Use semantic versioning based on conventional commit types
