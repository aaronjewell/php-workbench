# Conventional Commits

## Commit Message Format
```
<type>(<scope>): <description>

[optional body]

[optional footer(s)]
```

## Commit Types
- **feat**: New feature for the user
- **fix**: Bug fix for the user  
- **docs**: Documentation changes
- **style**: Code style changes (formatting, semicolons, etc.)
- **refactor**: Code refactoring without functional changes
- **test**: Adding or updating tests
- **chore**: Maintenance tasks, dependency updates
- **build**: Changes to build system or dependencies
- **ci**: Changes to CI configuration

## Scope Guidelines
Use scope to indicate the area of change:
- **commands**: VSCode command implementations
- **services**: Business logic services
- **utils**: Utility functions
- **tests**: Test files and testing infrastructure
- **config**: Configuration files
- **docs**: Documentation updates

## Description Rules
- Use imperative mood: "add feature" not "added feature"
- Start with lowercase letter
- No period at the end
- Maximum 50 characters for the subject line
- Be specific and descriptive
- **Describe only actual changes made**, not abstract outcomes or future promises
- **Focus on WHAT changed, not HOW you worked or design paradigms followed**
- Avoid references to development methodologies, practices, or workflows
- Use a concise style

## Examples

### ✅ Good Commit Messages
```
feat(commands): add createScratchpad command with basic functionality
fix(services): handle PHP execution timeout properly
docs(readme): update installation instructions
test(services): add unit tests for CodeExecutor class
refactor(utils): extract file operations to separate module
chore(deps): update @types/vscode to latest version
```

### ❌ Poor Commit Messages
```
❌ fix stuff
❌ Added new feature
❌ Update code
❌ WIP
❌ Fixed bug in the thing that was broken
❌ Enforce consistent formatting in CI/publishing pipeline
❌ Ensure code quality across the project
❌ Implement robust error handling
❌ Apply TDD principles to command implementation
❌ Follow incremental delivery workflow for feature addition
❌ Use zero-one-many testing approach
❌ Implement clean architecture patterns
```

### ✅ Better: Describe Actual Changes
```
✅ add format:check to vscode:prepublish script
✅ install prettier and add formatting configuration  
✅ add try-catch blocks to executeCode method
✅ add phpWorkbench.newScratchpad command registration
✅ create CodeExecutor class with execute method
✅ add timeout parameter to PHP execution
```

## Integration with Incremental Delivery
- **Each Action**: Commit after completing each logical action
- **Each Step**: Consider tagging releases after completing full deliverable steps
- **Breaking Changes**: Use `!` after type for breaking changes: `feat!: change API structure`
- **Multiple Types**: If commit spans multiple types, break into smaller commits

## Commit Body Guidelines
Use the body to explain:
- **Why** the change was made
- **What** problem it solves
- **How** it relates to requirements or user stories
- Any important context or constraints
- **Focus on concrete changes made**, not abstract benefits or future goals
- **Avoid mentioning development practices, methodologies, or workflow approaches**
- Use a concise style

## Example with Body
```
feat(services): add PHP code execution with Composer support

Implements core requirement for instant PHP code execution.
Automatically detects and includes vendor/autoload.php when present.
Includes timeout protection to prevent infinite loops.

Closes #42
```

## Release Integration
- Use conventional commits to generate changelogs
- Semantic versioning based on commit types:
  - `feat`: minor version bump
  - `fix`: patch version bump  
  - `feat!` or `BREAKING CHANGE`: major version bump
