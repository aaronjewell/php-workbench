---
description: "Zero-one-many testing strategy and systematic test progression"
---

# Zero-One-Many Testing Strategy

## Systematic Testing Approach
Test all functionality using this structured progression:

### 1. Simple Cases First
Start with the most basic, happy-path scenarios:
- Single valid input with expected output
- Most common use case
- Minimal complexity scenario

### 2. Zero-One-Many Dimensions
For each applicable dimension, test:
- **Zero**: Empty/null/undefined inputs
- **One**: Single item/value/occurrence  
- **Many**: Multiple items/values/occurrences

### 3. Boundary Behaviors (Priority 1)
Test the edges and limits:
- Empty collections/strings
- Maximum/minimum values
- First/last elements
- Threshold crossings

### 4. Interface Contracts (Priority 2)  
Test the public API contracts:
- Method signatures and return types
- Expected parameter validation
- Promise resolution/rejection patterns
- Event emission patterns

### 5. Exception Scenarios (Priority 3)
Test edge cases and error conditions:
- Invalid inputs
- Resource unavailability  
- Network/filesystem failures
- Timeout scenarios

## Implementation Order
1. **Write failing test** for simple case
2. **Implement minimal code** to pass test
3. **Validate test passes**
4. **Refactor** while keeping tests green
5. **Repeat** for next complexity level

## Test Implementation
For technical implementation details, follow @testing-standards.mdc

## Example Testing Progression
```typescript
// Simple case
test('should execute basic PHP code', () => {
  // Test: echo "hello"
});

// Zero case  
test('should handle empty code string', () => {
  // Test: ""
});

// One case
test('should execute single statement', () => {
  // Test: echo "test";
});

// Many case
test('should execute multiple statements', () => {
  // Test: multiple echo statements
});

// Boundary behaviors
test('should handle maximum code length', () => {
  // Test: very long code string
});

// Interface contracts
test('should return ExecutionResult with expected structure', () => {
  // Test: result shape and types
});

// Exception scenarios
test('should handle PHP syntax errors gracefully', () => {
  // Test: invalid PHP code
});
```

## Progression Strategy
Apply this testing order systematically:
1. Zero case → One case → Many case
2. Boundary behaviors on Z, O, M (Priority 1)
3. Interface contracts on Z, O, M (Priority 2)  
4. Exception scenarios on Z, O, M (Priority 3)
